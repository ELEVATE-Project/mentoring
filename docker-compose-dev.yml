version: '3.9'

volumes:
  mongodb_data: { driver: local }
  zookeeper-data:
  kafka-data:
  db-data:
  redis_data:
  healthcheck-volume:
  portainer_data:
  elasticsearch_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:

services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - '9000:9000'
    networks:
      - elevate_net

  # rocketchat:
  #   image: registry.rocket.chat/rocketchat/rocket.chat:6.6.1
  #   restart: always
  #   labels:
  #     traefik.enable: 'true'
  #     traefik.http.routers.rocketchat.rule: Host("${DOMAIN:-}")
  #     traefik.http.routers.rocketchat.tls: 'true'
  #     traefik.http.routers.rocketchat.entrypoints: https
  #     traefik.http.routers.rocketchat.tls.certresolver: le
  #   environment:
  #     MONGO_URL: '${MONGO_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/${MONGODB_DATABASE:-rocketchat}?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}'
  #     MONGO_OPLOG_URL: '${MONGO_OPLOG_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/local?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}'
  #     ROOT_URL: ${ROOT_URL:-http://localhost:${HOST_PORT:-3969}}
  #     PORT: ${PORT:-3969}
  #     DEPLOY_METHOD: docker
  #     DEPLOY_PLATFORM: ${DEPLOY_PLATFORM:-}
  #     REG_TOKEN: ${REG_TOKEN:-}
  #     # INITIAL_USER: yes
  #     #ADMIN_USERNAME: admin
  #     #ADMIN_NAME: Admin
  #     #ADMIN_EMAIL: rodriq@localhost.com
  #     #ADMIN_PASS: supersecret123##
  #     # OVERWRITE_SETTING_Show_Setup_Wizard: completed
  #   depends_on:
  #     - mongodb
  #   expose:
  #     - ${PORT:-3969}
  #   ports:
  #     - '${BIND_IP:-0.0.0.0}:${HOST_PORT:-3969}:${PORT:-3969}'
  #   networks:
  #     - elevate_net

  # mongodb:
  #   image: docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}
  #   ports:
  #     - '27017:27017'
  #   restart: always
  #   volumes:
  #     - mongodb_data:/bitnami/mongodb
  #   environment:
  #     MONGODB_REPLICA_SET_MODE: primary
  #     MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}
  #     MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27017}
  #     MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}
  #     MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}
  #     MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}
  #     MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}
  #     ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}
  #   networks:
  #     - elevate_net

  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.3.0'
    ports:
      - '2181:2181'
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - elevate_net
    logging:
      driver: none

  kafka:
    image: 'confluentinc/cp-kafka:7.3.0'
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    depends_on:
      - zookeeper
    networks:
      - elevate_net
    # logging:
    #   driver: none
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 10s
      timeout: 5s
      retries: 9

  kafka-connect:
    build:
      context: .
      dockerfile: kafka-connect.Dockerfile
    image: elevate/kafka-connect:1.0.0
    hostname: kafka-connect
    container_name: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '8083:8083'
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    logging:
      driver: json-file
    networks:
      - elevate_net

  # whodb:
  #   image: clidey/whodb
  #   ports:
  #     - '8081:8080'
  #   environment:
  #     WHODB_POSTGRES_1: '{"host":"citus_master_dev_mentoring","user":"postgres","password":"postgres","database":"postgres"}'
  #     WHODB_REDIS_1: '{"host":"redis"}'
  #     WHODB_ELASTICSEARCH_1: '{"host":"elasticsearch"}'
  #   depends_on:
  #     - redis
  #     - elasticsearch
  #   networks:
  #     - elevate_net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '8081:8080'
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: mentorEd
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    logging:
      driver: none
    networks:
      - elevate_net

  redis:
    image: 'redis:7.0.0'
    restart: 'always'
    ports:
      - '6379:6379'
    networks:
      - elevate_net

  elasticsearch:
    container_name: elevate-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.2
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
      - 'discovery.type=single-node'
      - 'xpack.security.enabled=false'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    logging:
      driver: none
    networks:
      - elevate_net

  kibana:
    container_name: elevate-kibana
    image: docker.elastic.co/kibana/kibana:8.5.2
    ports:
      - '5601:5601'
    environment:
      - 'ELASTICSEARCH_HOSTS=http://elasticsearch:9200'
    depends_on:
      - elasticsearch
    logging:
      driver: none
    networks:
      - elevate_net

  transformer-service:
    build: '../transformer-service/'
    container_name: elevate-transformer
    image: elevate/transformer:1.0
    volumes:
      - ../transformer-service/src/:/var/src
      - /var/src/node_modules # Prevents overwriting node_modules
    ports:
      - '3009:3009'
    command: ['nodemon', 'app.js']
    depends_on:
      citus:
        condition: service_healthy
    environment:
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master_dev_mentoring:5432/transformer-local
      - DEBUG_COLORS= 'true'
      - TERM= xterm-256color
      - COLORTERM= truecolor
    networks:
      - elevate_net

  bpp-catalog:
    build: '../mentoring-bpp-catalog-service/'
    container_name: elevate-catalog
    image: elevate/catalog:1.0
    volumes:
      - ../mentoring-bpp-catalog-service/src/:/var/src
    ports:
      - '3069:3069'
    command: ['nodemon', 'app.js']
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - elevate_net
  bpp-service:
    build: '../mentoring-bpp-service/'
    container_name: elevate-bpp
    image: elevate/bpp:1.0
    volumes:
      - ../mentoring-bpp-service/src/:/var/src
    ports:
      - '3070:3070'
    command: ['nodemon', 'app.js']
    environment:
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master_dev_mentoring:5432/medsep-mentoring
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - elevate_net

  mentoring:
    build: './'
    image: elevate/mentoring:2.4
    volumes:
      - ./src/:/var/src
    ports:
      - '3000:3000'
    command: ['nodemon', '--trace-warnings', 'app.js']
    environment:
      - KAFKA_URL=kafka:9092
      - USER_SERVICE_HOST=http://interface:3569
      - REDIS_HOST=redis://redis:6379
      - SCHEDULER_SERVICE_HOST=http://scheduler:4000
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master_dev_mentoring:5432/mentoring-local
      - DEBUG_COLORS= 'true'
      - TERM= xterm-256color
      - COLORTERM= truecolor
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      citus:
        condition: service_healthy
      user:
        condition: service_started
    networks:
      - elevate_net

  user:
    build: '../user/'
    image: elevate/user:2.4
    volumes:
      - ../user/src/:/var/src
    ports:
      - '3001:3001'
    command: ['nodemon', '--trace-warnings', 'app.js']
    environment:
      - KAFKA_URL=kafka:9092
      - REDIS_HOST=redis://redis:6379
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master_dev_mentoring:5432/user-local
      - SCHEDULER_SERVICE_HOST=http://scheduler:4000
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      citus:
        condition: service_healthy
      scheduler:
        condition: service_started
    networks:
      - elevate_net

  communications:
    build: '../chat-communications/'
    image: elevate/chat-communications:1.0
    volumes:
      - ../chat-communications/src/:/var/src
    ports:
      - '3123:3123'
    command: ['nodemon', '--trace-warnings', 'app.js']
    environment:
      - CHAT_PLATFORM_URL=http://rocketchat:3969
      - REDIS_HOST=redis://redis:6379
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master_dev_mentoring:5432/communications-local
      - SCHEDULER_SERVICE_HOST=http://scheduler:4000
    depends_on:
      - kafka
      - redis
    networks:
      - elevate_net

  notification:
    build: '../notification/'
    image: elevate/notification:2.4
    volumes:
      - ../notification/src/:/var/src
    ports:
      - '3002:3002'
    command: ['nodemon', '--trace-warnings', 'app.js']
    environment:
      - KAFKA_HOST=kafka:9092
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master_dev_mentoring:5432/notification-local
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - elevate_net

  scheduler:
    build: '../scheduler/'
    image: elevate/scheduler:1.0
    volumes:
      - ../scheduler/src/:/var/src
    ports:
      - '4000:4000'
    command: ['nodemon', '--trace-warnings', 'app.js']
    environment:
      - KAFKA_URL=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - elevate_net

  interface:
    build: '../interface-service/'
    image: elevate/interface:1.0
    volumes:
      - ../interface-service/src/:/var/src
    ports:
      - '3569:3569'
    command: ['node', '--trace-warnings', 'app.js']
    networks:
      - elevate_net

  citus:
    image: citusdata/citus:12.1
    container_name: 'citus_master_dev_mentoring'
    ports:
      - '5432:5432'
    environment: &AUTH
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      PGUSER: '${POSTGRES_USER:-postgres}'
      PGPASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      POSTGRES_HOST_AUTH_METHOD: '${POSTGRES_HOST_AUTH_METHOD:-trust}'
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - elevate_net
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: elevate-pgadmin
    restart: always
    ports:
      - '5500:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@shikshalokam.org
      - PGADMIN_DEFAULT_PASSWORD=password
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - elevate_net
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   ports:
  #     - '9090:9090'
  #   networks:
  #     - elevate_net

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   ports:
  #     - '4001:3000'
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - elevate_net

  # postgres-exporter:
  #   image: prometheuscommunity/postgres-exporter:latest
  #   container_name: postgres-exporter
  #   environment:
  #     DATA_SOURCE_NAME: 'postgresql://postgres:postgres@citus_master_dev_mentoring:5432/postgres?sslmode=disable'
  #   ports:
  #     - '9187:9187'
  #   depends_on:
  #     - citus
  #   networks:
  #     - elevate_net

  # kafka-exporter:
  #   image: danielqsj/kafka-exporter:latest
  #   container_name: kafka-exporter
  #   command: ['--kafka.server=kafka:9092']
  #   ports:
  #     - '9308:9308'
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - elevate_net
networks:
  elevate_net:
    external: false
